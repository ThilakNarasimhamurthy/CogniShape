version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: neuronest_db_prod
    environment:
      POSTGRES_DB: neuronest
      POSTGRES_USER: neuronest_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-neuronest_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - neuronest_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neuronest_user -d neuronest"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: neuronest_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - neuronest_network_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: neuronest_backend_prod
    environment:
      - DATABASE_URL=postgresql://neuronest_user:${DB_PASSWORD:-neuronest_password}@postgres:5432/neuronest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID:-}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET:-}
      - DEBUG=False
      - HOST=0.0.0.0
      - PORT=8000
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - neuronest_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: neuronest_frontend_prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000}
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:8000}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - neuronest_network_prod
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: neuronest_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - neuronest_network_prod
    restart: unless-stopped

networks:
  neuronest_network_prod:
    driver: bridge

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local 